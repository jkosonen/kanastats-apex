{"version":3,"sources":["bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","points","1","2","3","4","5","6","7","8","App","useState","stats","setStats","teams","setTeams","get","path","a","Promise","resolve","reject","fetch","then","response","json","catch","err","useEffect","Object","values","forEach","t","team","name","teamName","id","teamNum","kills","damage","match","teamPlacement","damageDealt","push","getData","className","style","backgroundImage","bg","textTransform","display","flexFlow","width","height","flex","marginTop","marginBottom","sort","b","map","i","players","slice","p","playerName","assists","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ea859d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.95acf5ec.jpg\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport bg from \"./bg.jpg\";\r\n\r\nconst points = {\r\n  1: 10,\r\n  2: 6,\r\n  3: 5,\r\n  4: 4,\r\n  5: 3,\r\n  6: 2,\r\n  7: 1,\r\n  8: 1,\r\n};\r\n\r\nfunction App() {\r\n  const [stats, setStats] = useState();\r\n  const [teams, setTeams] = useState([]);\r\n\r\n  const get = async (path) => {\r\n    const host =\r\n      \"https://33n5f8mgj7.execute-api.eu-west-1.amazonaws.com/dev/standings/\";\r\n    return new Promise((resolve, reject) => {\r\n      fetch(host + path)\r\n        .then((response) => response.json())\r\n        .then((response) => resolve(response))\r\n        .catch((err) => reject(err));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const stats = await get(\"s1\");\r\n      const teams = [];\r\n      Object.values(stats.teams).forEach((t) => {\r\n        const team = {\r\n          name: t[0].teamName,\r\n          id: t[0].teamNum,\r\n          kills: 0,\r\n          points: 0,\r\n          damage: 0,\r\n        };\r\n        t.forEach((match) => {\r\n          team.kills += match.kills;\r\n          team.points += (points[match.teamPlacement] || 0) + match.kills;\r\n          team.damage += match.damageDealt;\r\n        });\r\n        teams.push(team);\r\n      });\r\n      setTeams(teams);\r\n      setStats(stats);\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\" style={{ backgroundImage: \"url(\" + bg + \")\" }}>\r\n      <div className=\"leftCol\"></div>\r\n      <div className=\"rightCol\">\r\n        <div className=\"rightColTop\">\r\n          <span></span>\r\n          <span style={{ textTransform: \"uppercase\" }}></span>\r\n        </div>\r\n        <div\r\n          id=\"points\"\r\n          style={{\r\n            display: \"flex\",\r\n            flexFlow: \"column\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"stats\"\r\n            style={{ flex: 1, marginTop: 0, marginBottom: 40 }}\r\n          >\r\n            {stats ? (\r\n              <div>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th width=\"50\"></th>\r\n                      <th>Team</th>\r\n                      <th>Points</th>\r\n                      <th>Kills</th>\r\n                      <th>Damage Dealt</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {teams\r\n                      .sort((a, b) => {\r\n                        if (b.points > a.points) {\r\n                          return 1;\r\n                        } else if (b.points < a.points) {\r\n                          return -1;\r\n                        }\r\n                        return b.kills - a.kills;\r\n                      })\r\n                      .map((team, i) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>#{i + 1}</td>\r\n                            <td>{team.name}</td>\r\n                            <td>{team.points}</td>\r\n                            <td>{team.kills}</td>\r\n                            <td>{team.damage}</td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            {stats ? (\r\n              <div style={{ display: \"flex\", marginBottom: 40 }}>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Player</th>\r\n                      <th>Kills</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.values(stats.players)\r\n                      .sort((a, b) => b.kills - a.kills)\r\n                      .slice(0, 5)\r\n                      .map((p) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{p.playerName}</td>\r\n                            <td>{p.kills}</td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </table>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Player</th>\r\n                      <th>Damage</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.values(stats.players)\r\n                      .sort((a, b) => b.damageDealt - a.damageDealt)\r\n                      .slice(0, 5)\r\n                      .map((p) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{p.playerName}</td>\r\n                            <td>{p.damageDealt}</td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </table>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Player</th>\r\n                      <th>Assists</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.values(stats.players)\r\n                      .sort((a, b) => b.assists - a.assists)\r\n                      .slice(0, 5)\r\n                      .map((p) => {\r\n                        return (\r\n                          <tr>\r\n                            <td>{p.playerName}</td>\r\n                            <td>{p.assists}</td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}